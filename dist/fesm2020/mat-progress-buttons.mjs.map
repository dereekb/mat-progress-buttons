{"version":3,"file":"mat-progress-buttons.mjs","sources":["../../../projects/mat-progress-buttons/src/lib/mat-progress-buttons.injection-token.ts","../../../projects/mat-progress-buttons/src/lib/component/spinner-button/spinner-button.component.html","../../../projects/mat-progress-buttons/src/lib/component/spinner-button/spinner-button.component.ts","../../../projects/mat-progress-buttons/src/lib/component/bar-button/bar-button.component.html","../../../projects/mat-progress-buttons/src/lib/component/bar-button/bar-button.component.ts","../../../projects/mat-progress-buttons/src/lib/mat-progress-buttons.module.ts","../../../projects/mat-progress-buttons/src/mat-progress-buttons.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\nexport interface Config extends MatProgressButtonOptions {\n  id?: string;\n}\n\nexport type GlobalConfig = Config[];\n\nexport const GLOBAL_CONFIG = new InjectionToken<GlobalConfig>('Global Config');\n","<button mat-button\n  [type]=\"options.type\"\n  [color]=\"options.buttonColor\"\n  [class.active]=\"options.active\"\n  [class.fullWidth]=\"options.fullWidth\"\n  [class.mat-raised-button]=\"options.raised\"\n  [class.mat-stroked-button]=\"options.stroked\"\n  [class.mat-flat-button]=\"options.flat\"\n  [class.mat-fab]=\"options.fab\"\n  [ngClass]=\"options.customClass\"\n  [disabled]=\"options.active || options.disabled\">\n\n  <ng-container\n    *ngIf=\"options.buttonIcon\">\n    <mat-icon\n      class=\"mat-button-icon\"\n      [class.is-mat-icon]=\"!options.buttonIcon.fontSet\"\n      [class.active]=\"options.active && !options.disabled\"\n      [ngClass]=\"options.buttonIcon.customClass\"\n      [fontSet]=\"options.buttonIcon.fontSet\"\n      [fontIcon]=\"options.buttonIcon.fontIcon\"\n      [color]=\"options.buttonIcon.color\"\n      [svgIcon]=\"options.buttonIcon.svgIcon\"\n      [inline]=\"options.buttonIcon.inline\">\n      {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <span\n    class=\"button-text\"\n    *ngIf=\"!options.fab\"\n    [class.active]=\"options.active && !options.disabled\">\n      {{ options.text }}\n  </span>\n\n  <ng-container\n    *ngIf=\"options.fab && options.icon\">\n    <mat-icon\n      [fontSet]=\"options.icon.fontSet\"\n      [fontIcon]=\"options.icon.fontIcon\"\n      [color]=\"options.icon.color\"\n      [svgIcon]=\"options.icon.svgIcon\"\n      [inline]=\"options.icon.inline\">\n        {{ options.icon.fontSet ? '' : options.icon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <mat-spinner class=\"spinner\"\n    *ngIf=\"options.active && !options.disabled\"\n    [diameter]=\"options.fab ? 58 : options.spinnerSize\"\n    [color]=\"options.spinnerColor\"\n    [mode]=\"options.mode\"\n    [value]=\"options.value\"\n    [class.active]=\"options.active && !options.disabled\">\n  </mat-spinner>\n</button>\n","import {\n  Component,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n} from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\nimport {\n  GLOBAL_CONFIG,\n  GlobalConfig,\n} from '../../mat-progress-buttons.injection-token';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-spinner-button',\n  templateUrl: './spinner-button.component.html',\n  styleUrls: ['./spinner-button.component.scss'],\n})\nexport class MatSpinnerButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() buttonId: string;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  @HostListener('click', ['$event'])\n  public handleClick(event: MouseEvent): void {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  constructor(@Inject(GLOBAL_CONFIG) private config: GlobalConfig) {}\n\n  get configExists(): boolean {\n    return !!this.buttonId && !!this.config;\n  }\n\n  get globalConfig(): MatProgressButtonOptions {\n    return this.configExists\n      ? this.config.find((item) => item.id === this.buttonId)\n      : this.options;\n  }\n\n  private mergeObjects(globalOptions: MatProgressButtonOptions, options: MatProgressButtonOptions): void {\n    for (const key in globalOptions) {\n      if (options[key] === undefined) {\n        options[key] = globalOptions[key];\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n    this.mergeObjects(this.globalConfig, this.options);\n  }\n}\n","<button\n  mat-button\n  [type]=\"options.type\"\n  [color]=\"options.buttonColor\"\n  [class.active]=\"options.active\"\n  [class.mat-raised-button]=\"options.raised\"\n  [class.mat-stroked-button]=\"options.stroked\"\n  [class.mat-flat-button]=\"options.flat\"\n  [class.fullWidth]=\"options.fullWidth\"\n  [ngClass]=\"options.customClass\"\n  [disabled]=\"options.active || options.disabled\"\n>\n  <ng-container *ngIf=\"options.buttonIcon\">\n    <mat-icon\n      [class.is-mat-icon]=\"!options.buttonIcon.fontSet\"\n      [ngClass]=\"options.buttonIcon.customClass\"\n      [fontSet]=\"options.buttonIcon.fontSet\"\n      [fontIcon]=\"options.buttonIcon.fontIcon\"\n      [color]=\"options.buttonIcon.color\"\n      [svgIcon]=\"options.buttonIcon.svgIcon\"\n      [inline]=\"options.buttonIcon.inline\"\n    >\n      {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <span>{{ options.text }}</span>\n\n  <mat-progress-bar\n    class=\"bar\"\n    *ngIf=\"options.active && !options.disabled\"\n    [color]=\"options.barColor\"\n    [mode]=\"options.mode\"\n    [value]=\"options.value\"\n  >\n  </mat-progress-bar>\n</button>\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n} from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\nimport { GLOBAL_CONFIG, GlobalConfig } from '../../mat-progress-buttons.injection-token';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-bar-button',\n  templateUrl: './bar-button.component.html',\n  styleUrls: ['./bar-button.component.scss'],\n})\nexport class MatBarButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() buttonId: string;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  @HostListener('click', ['$event'])\n  handleClick(event: MouseEvent): void {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  constructor(@Inject(GLOBAL_CONFIG) private config: GlobalConfig) {}\n\n  get configExists(): boolean {\n    return !!this.buttonId && !!this.config;\n  }\n\n  get globalConfig(): MatProgressButtonOptions {\n    return this.configExists\n      ? this.config.find((item) => item.id === this.buttonId)\n      : this.options;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.options = { ...this.globalConfig, ...this.options };\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nimport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { GLOBAL_CONFIG, GlobalConfig } from './mat-progress-buttons.injection-token';\n\n// Export module's public API\nexport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nexport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nexport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatIconModule,\n  ],\n  exports: [MatSpinnerButtonComponent, MatBarButtonComponent],\n  declarations: [MatSpinnerButtonComponent, MatBarButtonComponent],\n})\nexport class MatProgressButtonsModule {\n  static forRoot(\n    config?: GlobalConfig\n  ): ModuleWithProviders<MatProgressButtonsModule> {\n    return {\n      ngModule: MatProgressButtonsModule,\n      providers: [{ provide: GLOBAL_CONFIG, useValue: config }],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}